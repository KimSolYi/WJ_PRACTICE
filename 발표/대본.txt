안녕하십니까. 인턴 수행과제 결과보고 발표하게 된 ONM1팀 김솔이입니다.  
발표를 시작하겠습니다. 

발표순서는 다음과 같습니다. 
수행과제를 소개하고 과제수행을 통해 배운점에 대해 말씀드리겠습니다. 
그리고 업무를 할 때 필요한 점이라고 생각되었던 점에 대해서도 말씀드리겠습니다. 
마지막으로 향후 계획에 대해 말씀드리고 질의응답시간을 갖겠습니다. 

수행한 과제를 소개해보겠습니다. 
주어진 4개의 과제 중 저는 실물증빙 비용등록, 결재문서 생성 두 화면을 구성했습니다.

실물증빙 비용등록 화면은 사용자가 직접 자신이 사용한 경비를 등록하는 화면입니다. 
사용자는 해당 화면에서 분개를 통해 비용등록을 할 수 있습니다. 
또한 사용자는 추가한 경비내역을 조회하고 변경사항이나 수정을 할 수 있습니다.
제가 띄운 이 화면은 비용을 등록하는 상황을 보여주고 있습니다.

결재문서생성 화면은 등록된 전표를 조회해서 결재문서를 요청하는 화면입니다. 
사용자가 등록한 비용의 전표를 조회하고 선택한 후 결재 비고란에 입력해서 결재를 요청을 할 수도 있고, 회수할 수도 있습니다.
제가 띄운 이 화면은 문서상태를 미상신 상태의 비용전표를 선택해 결재 요청한 상태의 화면입니다.

다음으로 과제 수행을 통해 배운 점에 대해 말씀 드리겠습니다. SBO 사용법을 처음 배우기도 했고, 애드온을 만드는 법을 배우기도 했고,
 다른 외의 것들도 배웠는데, 동기들 모두가 SBO 사용법은 처음 배웠으므로 이는 넘어가고 제가 배웠다고 느낀 다른 외의 것들에 대해 3가지 말씀 드리려 합니다. 

먼저 디버깅 법입니다. 
평상시 오류를 검출 할 때, break point를 잡고 디버그를 하는 습관을 가지지 않았습니다. 
그래서 어디서 오류가 났는지 잡기가 어려웠었고, 갑자기 결과가 나와도 이유를 모른 채 넘어가곤 했습니다.
하지만 이번 과제를 진행하면서 계속 디버깅 하는 습관을 가졌더니 어떤 오류 때문에 프로그램이 돌아가지 않는지 알 수 있었고, 오류를 고치는 속도도 빨라졌습니다.
그래서 업무를 할 때 디버깅하는 습관이 굉장히 중요하다는 것을 배우게 되었습니다. 

다음은 가독성 있는 코드와 주석을 짜는 습관입니다. 
제공받은 샘플 소스 코드를 보니 많은 주석이 달려있지는 않았습니다.
많은 선배님들께서는 해당 소스 코드의 내용이 어느 부분의 코드인지 보시면 바로 아시기 때문에 주석이 없어도 잘 보셨을 수도 있습니다.
하지만 저는 아직 모르는 것들이 많아서 주석이 없으면 다시 코드를 수정하거나 봐야 할 때마다 다시 분석해야 했습니다. 
그래서 탭으로 간격을 조절하고, 어떤 기능에서 어떻게 처리했는지 주석으로 적었더니 나중에 수정할 때 코드를 분석할 때 시간이 절약될 수 있었고, 쉽게 코드를 정리 할 수 있었습니다.
가독성 떨어지는 코드와 주석을 분석하고 정리하는 작업을 또다시 하게 되는 것보다 처음부터 자세한 코드와 주석을 적어야겠다는 생각을 하게 되었습니다.
그래서 가독성 있는 코드와 주석을 다는 습관이 중요하다는 것을 배우게 되었습니다.

다음은 프로젝트에 대한 이해 입니다 .
프로젝트를 정확하게 구현하기 위해서는 프로젝트에 대한 이해를 하는 습관이 필요하다고 생각했습니다.
한 기능이 다른 기능에 영향을 주기도하고, 이런 경우들이 많아 질수록 처리 해줘야 할 이벤트들도 많아지기 때문입니다.
이를 위해 각 기능을 구현할 때마다 각 기능이 갖고 있는 특성을 이해해야 했습니다. 
또한 요청사항도 정확히 이해해 구조를 깨닫고, 수행해야 정확한 프로그램을 만들 수 있다는 것을 배우게 되었습니다.

지금까지 과제를 수행하면서 배운 점에 대해 말씀 드렸습니다.
이번엔, 업무를 할 때 필요할 것 같다고 생각한 3가지를 말씀 드리겠습니다.

먼저 고객지향성입니다. 
좋은 프로그램이란 사용자가 사용하기 편리해야 좋은 프로그램이라고 생각했습니다. 
좋은 프로그램을 만들기 위해서는 먼저 사용하는 사람이 어떻게 해야 편할 수 있을지 생각해보려 하는 것이 필요하다고 생각했습니다. 
고객은 편리함을 위해 ‘프로세스를 간소화 할 수는 없을까?’, ‘클릭횟수를 줄일 수는 없을까?’ 같은 다양한 요구를 할 것입니다. 
사용자의 입장에서 어떻게 하면 편리 할 수 있는지 생각하고, 요구하기 전에 그들에게 제공을 하
게 된다면 결국 고객의 만족을 불러올 것이고, 신뢰를 줄 수 있는 방법이 될 것입니다. 
과제의 시스템 테스트를 하면서도 간단한 이벤트 처리들만 추가해도 사용자에게 편리한 프로그램이 될 수 있다는 것을 느끼게 되었습니다. 
따라서 앞으로 저도 업무를 할 때도 고객지향성이라는 것을 생각을 하는 습관을 갖고 업무에 임해야겠다는 것을 느끼게 되었습니다.

다음으로 정확성 입니다. 
업무를 하면서 다양한 오류가 있을 수 있습니다. 
이는 여러 번의 시스템 테스트를 통해 여러 번 체크하고, 오류 없는 정확한 프로그램을 만드는 것에 목표를 두면 해결 할 수 있다고 생각합니다. 
저도 과제를 수행하면서 데이터 소스 바인딩 오류라던가 form uid를 잘못 적어 오류를 마주치곤 했습니다. 
이름을 잘못 쓰지는 않았는지, 조건을 잘못 처리한 건 아닌지 꼼꼼하게 보면서 과제를 진행했고, 정확한 결과로 도출시키려 노력했습니다.
그래서 과제의 많은 양을 끝내려기 보다 마지막 제출 전까지 주어진 과제 안에서 여러 번 오류를 검사하고, 빠진 조건은 없는지 시스템 테스트를 계속해서 진행하며 체크했습니다. 
그 결과 설계서에서 요구하는 부분들을 오류 없이 실현시킬 수 있었고, 설계서에서 원하는 정확한 프로젝트를 완성시킬 수 있었습니다.
그래서 정확성이 업무를 할 때 필요한 것이라 느꼈고, 앞으로 저도 업무를 할 때 정확성을 지키기 위해 시스템 테스트를 여러 번 해야겠다는 것을 느꼈습니다.

다음으로 팀워크입니다. 
과제를 하다 막히는 부분들이 있었습니다. UDO를 만들 때 오브젝트 유형을 전표로 처리하지 않아 저장이 되지 않는 문제도있었고, 행 추가가 되지 않는 문제도 있었습니다. 
해결을 위해 구글링을 해보기도 하고, SDK-HELP center를 참조해보기도 했습니다.
하지만 오류의 문제점이 무엇인지 깨닫지 못해 혼자 해결할 수가 없는 문제라 판단했습니다. 
멘토님의 도움으로 오브젝트 유형이 전표가 아님을 알게 되어 쉽게 풀린 경우도 있었습니다. 
하지만 행 추가가 되지 않는 문제의 경우 동기들과 해결방법을 위해 여러 의견을 내놓는 브레인스토밍 기법으로 문제를 해결하려 노력했습니다. 
문제를 해결하기 위해 의견을 하나 둘씩 내놓다가 한 친구가 ‘추가모드 인 것 아니냐’는 의견을 내놓아 해결을 할 수 있었습니다. 
별것 아닌 일이었지만, 혼자 해결할 수 없는 일에 대해 조직은 집단으로 활동해 문제에 대해 집단지성으로 해결할 수 있습니다. 
업무를 할 때에도 멘토님의 도움처럼 선배님의 도움도 있을 수 있고, 동기들의 도움도 있을 수 있습니다. 
저는 이것이 팀워크라고 생각했습니다.
팀워크를 통해 집단 지성의 힘을 빌려 일을 해결할 수 있고,
팀워크를 통해 건강한 조직문화에 융합할 수 있다고 생각하게 되었습니다. 
그래서 팀워크가 업무를 할 때 필요한 것이라고 느끼게 되었고, 잘 융화되도록 노력해야겠다고 생각했습니다.

 지금까지 업무를 할 때 필요할 것 같다고 생각한 3가지에 대해 말씀 드렸습니다. 
이제 향후 계획에 대해 말씀 드리겠습니다.

단기적인 목표로 DB, C#프로그래밍 경험을 늘려 개발자로서 역량을 키우려 노력하겠습니다.
이론과 지식을 바탕으로 실무를 수행하고, 이해도를 높여 개발자로서의 역량을 높이겠습니다. 
또한, 회계, ERP 프로세스, 외국어 회화 역량도 늘릴 것입니다.
최종적으로 시스템만 봐도 무엇이 문제인지 바로 알아차릴 수 있도록 내공을 길러 SAP B1 전문가가 되어있는 저를 발견하고 싶습니다. 

이제 질의응답시간을 갖도록 하겠습니다. 

네. 이상으로 끊임없이 발전하는 웅진인 인턴 김솔이가 되겠습니다. 감사합니다.


























